4Sum

Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums 
such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
The solution set must not contain duplicate quadruplets.

Example:
Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> out;
        std::sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
            int temp = target-nums[i];
            for(int j=i+1;j<nums.size();j++){
                int temp1=temp-nums[j];
                int k=j+1;int l=nums.size()-1;
                while(l>k){
                    if(nums[k]+nums[l]>temp1)
                        l--;
                    else if(nums[k]+nums[l]<temp1)
                        k++;
                    else{
                        vector<int> ans;
                        ans.push_back(nums[i]);
                        ans.push_back(nums[j]);
                        ans.push_back(nums[k]);
                        ans.push_back(nums[l]);
                        out.push_back(ans);
                        while(l>k&&nums[k]==ans[2])k++;
                        while(l>k&&nums[l]==ans[3])l--;
                    }
                }
                while(j+1<nums.size()&&nums[j+1]==nums[j])j=j+1;
            }
            while(i+1<nums.size()&&nums[i+1]==nums[i])i=i+1;
        }
        return out;
    }
};


Submission Result: Accepted
